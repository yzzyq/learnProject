import numpy as np
import fitsData
import selfDataCompare as sdc
import os
import time
import process

# 根据相似度进行对比
counter_start_time = time.perf_counter()

# 发射线的位置
center = [6564, 4862]
# 线表各发射线的位置
all_Centers = [6549,6585,6718,6732]

threshold = 1

# fileName = 'E:/second/second-1'
# fileName = 'difficult'
# result_file = 'difficult-result-2'

# fileName = '617'
# result_file = '617-result-2'

# fileName = '3611'
# result_file = '3611-result-4'

# fileName = '8202'
# result_file = '8202-result-3'

# fileName = '12872'
# result_file = '12872-result-2'

fileName = '19411'
result_file = '19411-result'




max_threshold = [0.5, 0.5, 1]
preset_weight = [0.8, 0.2]

list_dir = os.listdir(fileName)
if not os.path.exists(result_file):
    os.mkdir(result_file)

cut_off_threshold = [(index+1) / 20  for index in range(20)]

# 3611
# true_index = [[211, 161, 35, 5, 6, 242, 176, 395, 182, 169], 

#               [175, 67, 1143, 1148, 13, 744, 1156, 1602, 1630, 202],

#               [217, 640, 876]]

three_dir_name = ['0-10', '10-50', '50']

# 提取出所有数据的信息，并且按照信噪比对数据进行分组
three_ston_dataSet, three_ston_Poistion, three_ston_index, three_ston_fileName = fitsData.exractData(fileName)

# 将数据保存起来
# for ston_index, ston_fileName in enumerate(three_ston_fileName):
#     file_name = fileName + '-' + three_dir_name[ston_index] + '.txt'
#     with open(file_name, 'a') as f:
#         for one_file_name in ston_fileName:
#             f.write(one_file_name + '\n')
# aa = aa

# 19411
true_index = [[625, 1100, 355, 149, 266, 265, 1583, 1064, 626, 375, 1847, 1782, 161, 1077, 254, 252, 287, 604, 1900, 692, 283, 268, 
               488, 1145, 1897, 397, 619, 1549, 351, 1522, 1702, 1132, 1338, 1070, 593, 1003, 1621, 982, 508, 1856, 1065, 1152, 595, 
               594, 1222, 1086, 65, 1160, 644, 995, 1259, 1349, 946, 1436, 1430, 371, 672, 1845, 1844, 507, 291, 1495, 1141, 616, 
               1542, 837, 1470, 1050, 1488, 504, 1721, 228, 549, 530, 1424, 605, 69, 1588, 832, 1138, 956, 1453, 1895, 938, 993,
               1849, 1360, 1038, 1136, 10, 1556, 1743, 1810, 559, 1566, 1348, 1841, 1756, 1902, 484, 744, 1892, 1235, 1720, 858, 
               1229, 1843, 524, 372, 104, 1613, 1482, 752, 1246, 774, 1005, 1363, 537, 1604, 1727, 1128, 1532, 422, 1088, 684, 380, 
               1494, 1276, 221, 765, 730, 1082, 706, 528, 610, 1776, 182, 1573, 1164, 417, 1265, 425, 1264, 588, 1361, 1816, 591, 
               432, 465, 1855, 796, 1245, 113, 811, 1503, 663, 555, 178, 657, 601, 769, 61, 1388, 1796, 1417, 670, 650, 510, 1037, 
               521, 420, 1874, 404, 1180, 151, 1346, 1679, 1035, 979, 337, 408, 396, 627, 471, 1886, 402, 799, 1578, 824, 1238, 738, 
               152, 844, 1367, 1283, 368, 379, 146, 455, 1457, 977, 461, 1383, 177, 1368, 661, 1163, 1309, 311, 1605, 296, 1184, 1818, 
               839, 891, 1020, 517, 701, 1852, 1805, 1401, 64, 81, 3, 1779, 560, 1736, 1398, 1149, 1804, 1013, 1403, 1255, 204, 748],
               
              [324, 4447, 2096, 554, 5493, 2609, 4276, 4216, 5539, 4790, 5424, 5877, 2432, 5373, 2655, 6282, 3929, 1927, 5719, 4486, 
               5343, 4089, 1132, 4438, 551, 6741, 4375, 4188, 5010, 5903, 3977, 5061, 4000, 3400, 5083, 4519, 333, 5822, 2495, 5019, 
               2666, 6393, 4776, 2235, 1984, 1689, 5382, 5766, 5897, 5746, 3906, 4416, 4018, 4185, 115, 5525, 5332, 238, 1686, 4439, 
               1972, 5618, 5313, 4191, 5274, 4087, 2873, 3918, 4444, 5931, 4732, 5873, 4540, 3282, 4648, 6476, 3919, 5176, 4370, 4575, 
               5316, 4991, 4685, 1337, 3959, 3730, 3308, 4084, 5929, 4663, 7188, 4433, 1909, 4060, 4908, 3203, 4282, 3165, 3190, 2738, 
               5910, 4422, 5478, 5439, 4082, 189, 5603, 4056, 3968, 4083, 3899, 4742, 4423, 3594, 1724, 4269, 5774, 1086, 5591, 4427, 
               4206, 4887, 3085, 5146, 5708, 194, 5341, 513, 4205, 342, 5521, 5699, 6372, 5088, 3254, 4873, 5749, 4334, 4879, 1483, 5958, 
               2083, 5698, 5527, 5556, 5496, 5445, 4560, 5072, 4527, 4309, 4408, 5555, 4513, 6569, 5476, 4421, 960, 3223, 5685, 2261, 5105, 
               4539, 108, 5795, 4804, 6759, 4265, 1323, 4165, 4684, 1656, 4190, 422, 5348, 4792, 3854, 4099, 468, 2046, 5600, 4546, 5471,
               4501, 5421, 1126, 4511, 5491, 4333, 4264, 4062, 4686, 4208, 5838, 5776, 5592, 5490, 3331, 4063, 5210, 4630, 2369, 4044, 
               5305, 5831, 1528, 1255, 5762, 4499, 6039, 969, 5247, 5706, 3468, 209, 5015, 5664, 4979, 4260, 4209],

               [10029, 8979, 4826, 3284, 4838, 3017, 5080, 2858, 6221, 5636, 6696, 418, 573, 2644, 214, 4222, 2521, 2701, 925, 8575, 8730, 
               8159, 7386, 5813, 7834, 7007, 3313, 9622, 6352, 9767]]




# 12872
# true_index = [[1540, 358, 1493, 775, 1763, 1522, 1330, 840, 1539, 460, 720, 1542, 1762, 597, 417, 1217, 1791, 523, 367, 168, 1694, 
#                473, 846, 289, 377, 563, 774, 945, 167, 548, 1004, 987, 869, 1689, 348, 915, 1583, 1463, 337, 510, 950, 565, 629, 
#                917, 262, 406, 1435, 990, 102, 658, 109, 1700, 1442, 402, 320, 986, 566, 451, 519, 461, 1504, 1575, 948, 1769, 347, 
#                1789, 1443, 1521, 958, 1734, 1786, 1062, 376, 1746, 364, 137, 839, 1519, 1431, 233, 916, 1742, 995, 504, 544, 5, 
#                1400, 311, 1233, 362, 1437, 1002, 4, 1496, 901, 210, 1032, 1603, 1028, 997, 835, 1405, 502, 194, 496, 853, 543, 166, 
#                117, 95, 488, 947, 877, 972, 17, 521, 570, 1570, 130, 960, 1413, 509, 1558, 970, 330, 469, 1574, 734, 682, 1761, 
#                328, 100, 959, 371, 897, 88, 408, 735, 212, 1624, 1557, 591, 1511, 874, 322, 622, 265, 324, 691, 985, 861, 957, 1525, 
#                836, 873, 528, 1478, 931, 1027, 1787, 1692, 1691, 806, 421, 983, 1248, 1466, 1153, 401, 404, 23, 989, 1531, 329, 436, 
#                1590, 974, 1520, 589, 332, 506, 1604, 1133, 1506, 380, 397, 112, 1573, 1147, 463, 865, 1386, 1059, 439, 1586, 583, 
#                1633, 631, 1050, 525, 918, 954, 530, 298, 128, 98, 1684, 562, 551, 1258, 956, 1571, 96, 827, 1589, 1155, 1137, 1630, 
#                909, 1621, 1611, 80, 1782, 1331, 868, 1738, 361, 1550, 140, 182, 261, 19, 1399, 305, 455, 541, 1010, 1795, 1743, 309, 
#                456, 99, 1029, 201, 564, 1230, 1459, 1637, 49, 1588, 930, 937, 253, 617, 213, 466, 949, 1626, 152, 818, 420, 497, 602,
#                1704, 375, 712, 894, 279, 483, 973, 1549, 1775, 283, 354, 1597, 288, 416, 459, 1021, 1022, 3, 28, 942, 1714, 630, 1444, 
#                1578, 556, 1785, 1256, 411, 1401, 968, 395, 1653, 272, 1015, 594, 1058],
#               [300, 3986, 1941, 601, 2500, 1737, 4358, 3979, 3659, 27, 4017, 1087, 4463, 4210, 4573, 2332, 4253, 4007, 547, 945, 1732, 
#                1050, 963, 2301, 4170, 1141, 906,37, 4549, 4468, 4288, 4289, 80, 1170, 593, 1161, 896, 2403, 1888, 2405, 748, 3788, 792, 
#                1761, 1566, 2319, 1126, 3968, 654, 2488, 3961, 857, 968, 951, 1125, 1810, 4143, 173, 935, 2477, 28, 171, 3275, 17, 1551, 
#                1915, 1925, 4227, 4194, 3898, 406, 665, 339, 4272, 38, 1994, 568, 1058, 146, 1164, 880, 1934, 1783, 769, 866, 830, 2015, 
#                910, 4575, 1347, 889, 2303, 1082, 4122, 2180, 865, 177, 4262, 707, 1780, 878, 1378, 1147, 2187, 15, 2402, 2434, 2473, 
#                1332, 4381, 936,2377, 616, 4267, 1454, 1922, 4556, 1138, 1878, 876, 701, 355, 1902, 1939, 1817, 745, 256, 675, 703, 1068,
#                4478, 58, 1397, 4577, 2492, 829, 861, 524, 374, 4100, 4773, 1487, 4525, 150, 2458, 4771, 687, 2746, 314, 3987, 12, 162, 
#                4560, 1152, 4229, 2426, 4190, 643, 960, 128, 783, 999, 2910, 1101, 289, 1537, 3606,11, 977, 1241, 595, 189, 1284, 2465, 
#                702, 886, 290, 2474, 4372, 1410, 2392, 2350, 1413, 1798, 4332, 142, 1008, 1839, 816, 65, 3045, 247, 4669, 1987, 4282,
#                2449, 1261, 4612, 4123, 1140, 4393, 2656, 541, 4276, 2489, 3855, 1089, 743, 4598, 891, 1935, 4283, 4016, 4374, 1092, 
#                1774, 1158, 56, 2446, 644, 523, 4490, 4056, 538, 4043, 1717, 206, 907, 1840, 1735, 882, 1055, 2270, 453, 651, 3872, 
#                843, 1136, 52, 4124, 1718, 4059, 1246, 804, 1923, 831, 965, 1595, 820, 4134, 4217, 506, 1704, 461, 4126, 1133, 548, 905, 
#                954, 2470, 575, 690, 666, 560, 4695, 685, 540, 175, 581, 1167, 824, 2365, 533, 1202, 1855, 4074, 367, 823, 990, 799, 46, 
#                1004, 2481, 1548, 1044, 1990, 4309, 1911, 757, 678, 642, 662, 4116, 1105, 1090, 1054, 1765, 2134, 759, 4378, 4290, 1006, 
#                883, 4285, 3985, 998, 4147, 1996, 691, 735, 572, 530, 1069, 753, 992, 2241, 340, 668, 294, 669, 812, 1084, 761, 1028, 
#                1177, 1593, 899, 4005, 4193, 3019, 733],
#                [2348, 691, 3888, 1132, 2358, 4138, 1953, 2781, 4167, 3319, 2380, 3349, 4591, 3190, 1602, 1381, 3947, 6046, 1902, 2238, 
#                5633, 5499, 5591, 2364, 3499, 2333, 1531, 930, 1804, 2796, 5637, 5374, 4940, 856, 3444, 2860, 3288, 6103, 348]]


# 8202
# true_index = [[371, 402, 548, 736, 499, 739, 569, 384, 448, 19, 283, 486, 52, 450, 243, 156, 744, 757, 567, 664, 606, 646, 314, 
#                705, 4, 405, 153, 616, 142, 684, 154, 250, 244, 481, 574, 190, 145, 21, 312, 62, 192, 645, 241, 3, 743, 667, 287, 
#                11, 161, 282, 253, 414, 729, 577, 102, 381, 662, 462, 205, 10, 492, 563, 568, 288, 249, 242, 245, 572, 247, 128, 
#                290, 649, 310, 186, 725, 148, 426, 721, 466, 228, 149, 591, 521, 64, 334, 362, 663, 68, 248, 251, 8, 308, 101, 208, 
#                762, 110, 479, 7, 719, 298, 171, 181,339, 756, 682, 61, 333, 639, 660, 184, 185, 306, 260, 150, 6],
#                [1184, 3184, 3131, 2521, 2899, 3819, 2696, 2876, 3672, 2229, 3233, 2069, 2959, 1515, 3247, 2945, 2230, 3670, 2984, 
#                86, 2501, 2554, 3337, 2038, 3406, 3088, 1958, 3702, 3480, 3134, 2665, 2288, 3655, 2777, 2415, 2728, 1513, 2679, 3171, 
#                2557, 1879, 1931, 3831, 3204, 3345, 1841, 3448, 2629, 3169, 2348, 3176, 1957, 3471, 1512, 3834, 330, 2598, 1694, 3158, 
#                2369, 2773, 2970, 3679, 2502, 3315, 2008, 2983, 3461, 3669, 2532, 3862, 2990, 1314, 1963, 2023, 3473, 2786, 2560, 692, 
#                3597, 2081, 2439, 2925, 3714, 2933, 2664, 2411, 2550, 1646, 3487, 3248, 3530, 1950, 726, 3075, 2093, 2811, 1917, 2022, 
#                1857, 3340, 2036, 2322, 3148, 739, 1852, 3344, 2530, 3149, 2171, 1970, 2661, 2562, 1651, 2723, 3739, 788, 2437, 1076, 
#                3157, 1121, 1876, 2218, 1844, 1861, 2840, 745, 1968, 1452, 3231, 2722, 1013, 2445, 3661, 2150, 760, 3718, 2669, 3317, 
#                3527, 2387, 3296, 2942, 1656, 2801, 1036, 141, 3097, 2243, 3717, 1510, 3786, 3002, 2325, 2727, 2238, 2503, 765, 2791, 
#                2861, 2308, 2590, 2738, 2478, 2687, 2845, 1682, 2798, 2793, 496, 2900, 3683, 3086, 3528, 3375, 16, 3590, 3258, 2736, 
#                1223, 3857, 3246, 3133, 3072, 2989, 3850, 3037, 2931, 3370, 926, 895, 3376, 2172, 2693, 2142, 3128, 2317, 3219, 2125, 
#                2536, 2379, 3302, 3142, 3400, 2862, 2683, 2789, 1216, 2891, 2816],
#                 [1751, 1359, 648, 2635, 3382, 3461, 3139, 3305, 2115, 919, 2434, 1022, 3460, 2664, 2314, 3533, 3463, 2499, 2364]]


# 3611
# true_index = [[4, 422, 408, 43, 394, 154, 40, 60, 334, 37, 160, 317, 34, 311, 434, 118, 275, 181, 49, 446, 
#                 231, 175, 386, 442, 375, 104, 3, 165, 0, 90, 456, 56, 210, 1, 364, 373,
#                 339, 331, 45, 102, 161, 41, 5, 103, 315, 352, 381, 241, 374, 172, 451, 348, 151, 75, 266, 123, 431, 
#                 429, 366, 370, 397, 70, 376, 457, 112, 170, 91, 336, 168, 69, 38, 50, 18, 414, 292, 173, 230, 312, 
#                 438, 418, 461, 265, 452, 300, 100],
#                [1051, 1629, 743, 1798, 198, 38, 757, 1144, 61, 1406, 679, 156, 1601, 122, 1670, 680, 28, 174, 1857, 
#                1147, 1008, 286, 190, 1309, 1464, 1547, 1139, 505, 463, 142, 682, 378, 1685, 1691, 1040, 13, 1420, 1230, 
#                1023, 1083, 445, 391, 1138, 1129, 1035, 831, 1768, 1417, 1879, 1347, 1756, 46, 644, 1334, 1193, 12, 
#                1189, 201, 1612, 778, 687, 1700, 436, 202, 525, 1890, 1351, 66, 143, 1136, 113, 530, 1322, 107, 407, 1432, 
#                1801, 90, 253, 493, 704, 1397, 1175, 1771, 1258, 1174, 39, 1133, 18, 1177, 1550, 1832, 1755, 1155, 1200, 102, 
#                1061, 1157, 124, 231],
#                [639, 875, 216]]

# file_index = ['C:/Users/guoji/Desktop/paper/数据整理/19411/19411-0-10-true-file.txt', 
#               'C:/Users/guoji/Desktop/paper/数据整理/19411/19411-10-50-true-file.txt',
#               'C:/Users/guoji/Desktop/paper/数据整理/19411/19411-50-true-file.txt']

for ston_index in range(len(three_ston_dataSet)):
    file_path = fileName + '/' + three_dir_name[ston_index]

    # 拿出数据
    dataSet = three_ston_dataSet[ston_index]
    allPoistion = three_ston_Poistion[ston_index]
    allIndex = three_ston_index[ston_index]
    all_fileName = three_ston_fileName[ston_index]

    # one_true_index = true_index[ston_index]
    # with open('3611-true-file.txt', 'a') as f:
    #     for one_index in one_true_index:
    #         f.write(all_fileName[one_index] + '\n')
    # continue


    # 根据文件名找出标签
    # if ston_index == 2:
    # true_index = []
    # with open(file_index[ston_index], 'r') as f:
    #     for one_file in f.readlines():
    #         # print(one_file)
    #         index = all_fileName.index(one_file.strip('\n').strip(' '))
    #         true_index.append(index)
    #         # print(index)
    # print(true_index)
    # print(len(true_index))
    # continue
    # aa = aa
    # else:
    #     continue
    # aa = aa

    # for data_print_index in range(len(allIndex)):
        # print('{0}:{1},{2}'.format(data_print_index, allIndex[data_print_index], all_fileName[data_print_index]))
    dataProcess = np.zeros((len(dataSet),4))
    print('找到周围数据。。')
    # 得出所有数据周围的数据，这样得话计算量较大，修改一下
    # aroundData = adc.getAroundData(allPoistion, threshold)
    print('开始计算信息。。')
    # 得出全部的信息
    no_class_index = sdc.getFluxData(dataSet, center, dataProcess, allPoistion, all_Centers, threshold)
    print('得到全部的信息')
    for data_index,data in enumerate(dataProcess):
        print(data_index, data)

    print('得到全部的信息，算法进行排序')
    all_sort_index = process.threeColProcess(dataProcess,no_class_index,preset_weight)

    print('排序的结果:', all_sort_index)
    with open(result_file + '/' + fileName + '-' + three_dir_name[ston_index] + '-true-file-name.txt', 'a') as f:
        for one_index in all_sort_index:
            f.write(all_fileName[one_index] + '\n')
    
    for one_threshold in cut_off_threshold:
        num = int(len(all_sort_index) * one_threshold)
        result = set(all_sort_index[:num])
        have_num = len(result & set(true_index[ston_index]))
        recall = 0
        precise = 0
        if len(true_index[ston_index]) != 0 and num != 0:
            recall = have_num / len(true_index[ston_index])
            precise = have_num / num
        no_index = set(true_index[ston_index]) - result
        for index in no_index:
            print(all_fileName[index])
        print('threshold:{0}, recall:{1}, precise:{2}, number:{3}, true_num:{4}'.format(one_threshold,
                                                                                        recall,
                                                                                        precise,
                                                                                        num,
                                                                                        have_num))

running_time = time.perf_counter() - counter_start_time
print('运行时间:', running_time)
with open(result_file + '/time.txt', 'w') as f:
    f.write('time:' + str(running_time))

